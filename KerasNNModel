import numpy as np
from keras.layers.core import Dense, Activation, Dropout
from keras.models import Sequential
from keras.optimizers import SGD

if __name__ == '__main__':
    n_classes = 2
    n_features = 1
    n_te = 100
    n_hidden_layers = 0

    X_train = np.zeros((n_te, n_features), dtype=np.int16)
    Y_train = np.zeros((n_te, n_classes), dtype=np.int16)

    for i in range(0, n_te):
        X_train[i] = i
        if i < 50:
            Y_train[i][0] = 1
        if i >= 50:
            Y_train[i][1] = 1

    model = Sequential()

    model.add(Dense(output_dim=n_hidden_layers, input_dim=n_features, init="uniform", activation='tanh'))
    model.add(Dropout(0.9))
    model.add(Dense(output_dim=n_hidden_layers, init="uniform", activation='tanh'))
    model.add(Dropout(0.9))
    model.add(Dense(output_dim=n_classes, init="uniform"))
    model.add(Activation("softmax"))

    sgd = SGD(lr=0.1, decay=1e-6, momentum=0.9, nesterov=True)
    model.compile(loss='categorical_crossentropy', optimizer=sgd)

    model.fit(X_train, Y_train, nb_epoch=30, batch_size=32)

    print model.evaluate(X_train, Y_train, batch_size=32)

    print model.predict_classes(np.array([[1]]))
    print model.predict_classes(np.array([[45]]))
    print model.predict_classes(np.array([[51]]))
    print model.predict_classes(np.array([[100]]))

    print
